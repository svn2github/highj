#summary Things that need to be clarified

= Open Questions =

== Does inheritance for type constructors make sense? ==

E.g. How should something like an `IterableOf` work?

== Should we use composition over inheritance for type classes? ==

E.g. Apply would not longer inherit from Functor, but have a getFunctor method. Applicative would have a getApply (and for convenience a getFunctor) method etc. 

  * *Pro:* Implementation easier and more reuseable. 
  * *Con:* Usage gets probably more complicated.

== Category Package ==

  * How to support instances that implement multiple extensions of Monad (`MonadPlus`, `MonadFix`...) or Arrow (`ArrowChoice`, `ArrowLoop`...) with predefined methods (until defender methods arrive in Java)? 
  * What to do with the infamous Monad.fail method?
  * Can we implement monad transformers?

== Type Classes ==

  * Which other data type classes would be useful? Set, Map..?
  * Which monads would be useful?

== Examples ==

  * What would be a good, non-trivial example? Maybe something from Haskell can be translated (but lazyness could be an issue)?

== Do notation ==

  * To do or not to do?