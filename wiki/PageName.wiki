#summary Basics

= The Problem =

The problem is that Java doesn't support higher order type polymorphism ("higher kinded types", as Scala calls it). E.g. it's easy to write a functor for a _given_ generic class like List:

{{{
public class ListFunctor {
  public <A,B> List<B> fmap(F<A,B> fn, List<A> source) {
     ...
  }
}
}}}

As you can see, a functor can "translate" the values inside a "container" (at least this is the naive interpretation) using a function. Now functors are not only a useful but also a very common structure, so we would like to abstract over this concept. But in Java *you can't*. We would need something like: 

{{{
public class Functor<X<?>> {
  public <A,B> X<B> fmap(F<A,B> fn, X<A> source) {
     ...
  }
}
}}}

This is not possible. We can't say "regardless what `X` is, if you put an `X<A>` in `fmap`, you will get an `X<B>` back". The abstraction over A and B is not enouogh, we need to abstract over the container, in order to write functors for Lists, Sets, Maps, Strings, Functions etc.

= The Solution =

The only way to simulate higher order type polymorphism in Java is to use the abstraction we already have, that is the abstraction of the the type parameters. To do this we need to separate the "container type" from it's value type, and then making it a type parameter itself. So instead of `List<String>` we have something like `Something<List, String>`. Now the container is independent from it's value, and we can abstract over it.

In order to make things more readable and to draw the attention to `List` instead of `Something`, I used `_` (underscore) as name for the `Something` class. Further I can't use `List` as type parameter, because it is generic. So I wrote a class `ListOf` which both serves as type parameter, and as "translator" between `List<A>` and the wrapped version `_<ListOf, A>`. The translation in a class like `ListOf` is usually implemented by providing a `wrap` and an `unwrap` method, and a small set of other useful utility function (e.g. for `List`s an `isEmpty` method). 

The remaining problem is just one of security:  We need to make sure that only a `ListOf` is allowed to read data from a `_<ListOf, A>`, because only `ListOf` "knows" what's really "inside" that wrapper (and needs to do the dirty casts). There are several ways to achieve that. The route I took was defining a `TC` interface (for "type constructor"), that every class like `ListOf` must implement, e.g. `ListOf implements TC<ListOf>`. This allows to implement an mechanism to give *only* the class mentioned in the type paramter access to the content of the wrapper. But as long as you don't want to implement a `TC` yourself, you don't need to know the details.

The important thing is, that we can finally write a general functor interface, and implement it for arbitratry `TC` wrappers:

{{{
public interface Functor<X extends TC<X>> {
  public <A,B> _<X,B> fmap(F<A,B> fn, _<X,A> source);
}

public class ListFunctor implements Functor<ListOf> {
  public <A,B> _<ListOf, B> fmap(F<A,B> fn, _<ListOf, A> source) {
     ...
  }
}
}}}

Everything else in highJ follows this scheme. 

For classes with two type arguments there is a `__` (2 underscore) wrapper class and a `TC2` interface. CL and CR just are classes which help to "curry" a `TC2` into a `TC`, so you can write e.g. a functor for Pairs, which works only on the first (or second) argument. 

I know the short names are confusing at first, but the type signatures are already rather long and I didn't wanted to make them even longer.